#BlueJ class context
comment0.target=Responder
comment0.text=\r\n\ The\ responder\ class\ represents\ a\ response\ generator\ object.\r\n\ It\ is\ used\ to\ generate\ an\ automatic\ response,\ based\ on\ specified\ input.\r\n\ Input\ is\ presented\ to\ the\ responder\ as\ a\ set\ of\ words,\ and\ based\ on\ those\r\n\ words\ the\ responder\ will\ generate\ a\ String\ that\ represents\ the\ response.\r\n\r\n\ Internally,\ the\ reponder\ uses\ a\ HashMap\ to\ associate\ words\ with\ response\r\n\ strings\ and\ a\ list\ of\ default\ responses.\ If\ any\ of\ the\ input\ words\ is\ found\r\n\ in\ the\ HashMap,\ the\ corresponding\ response\ is\ returned.\ If\ none\ of\ the\ input\r\n\ words\ is\ recognized,\ one\ of\ the\ default\ responses\ is\ randomly\ chosen.\r\n\ \r\n\ @author\ Catherine\ Oldfield\r\n\ for\ RVCC\ GDEV242\ -\ Fall\ 2020\r\n\ from\ code\ written\ by\ David\ J.\ Barnes\ and\ Michael\ K\u00F6lling.\r\n\ @version\ 2020/11/25\r\n
comment1.params=
comment1.target=Responder()
comment1.text=\r\n\ Construct\ a\ Responder\r\n
comment2.params=words
comment2.target=java.lang.String\ generateResponse(java.util.HashSet)
comment2.text=\r\n\ Generate\ a\ response\ from\ a\ given\ set\ of\ input\ words.\r\n\ \r\n\ @param\ words\ \ A\ set\ of\ words\ entered\ by\ the\ user\r\n\ @return\ \ \ \ \ \ \ A\ string\ that\ should\ be\ displayed\ as\ the\ response\r\n
comment3.params=
comment3.target=void\ fillResponseMap()
comment3.text=\r\n\ Enter\ all\ the\ known\ keywords\ and\ their\ associated\ responses\r\n\ into\ our\ response\ map.\r\n
comment4.params=
comment4.target=void\ fillDefaultResponses()
comment4.text=\r\n\ Build\ up\ a\ list\ of\ default\ responses\ from\ which\ we\ can\ pick\r\n\ if\ we\ don't\ know\ what\ else\ to\ say.\r\n\ \r\n\ This\ is\ the\ original\ version\ of\ the\ method\ written\ by\ Barnes\ and\ K\u00F6lling.\r\n\ It\ is\ here\ for\ reference.\r\n
comment5.params=
comment5.target=void\ fillDefaultResponses2()
comment5.text=\r\n\ Build\ up\ a\ list\ of\ default\ responses\ from\ which\ we\ can\ pick\r\n\ if\ we\ don't\ know\ what\ else\ to\ say.\r\n\ This\ method\ parses\ an\ input\ text\ file\ in\ which\ responses\ are\ separated\ by\ a\r\n\ blank\ line\ in\ the\ file.\r\n
comment6.params=
comment6.target=void\ fillDefaultResponsesLambdaVersion()
comment6.text=\r\n\ Build\ up\ a\ list\ of\ default\ responses\ from\ which\ we\ can\ pick\r\n\ if\ we\ don't\ know\ what\ else\ to\ say.\r\n\ This\ method\ explores\ the\ use\ of\ streams\ and\ lambdas\ and\ is\ not\ \r\n\ properly\ functional.\ It\ remains\ here\ for\ future\ code\ exploration\r\n\ and\ debugging.\r\n
comment7.params=
comment7.target=java.lang.String\ pickDefaultResponse()
comment7.text=\r\n\ Randomly\ select\ and\ return\ one\ of\ the\ default\ responses.\r\n\ @return\ \ \ \ \ A\ random\ default\ response\r\n
numComments=8
